from dotenv import load_dotenv
import os
from sqlalchemy import create_engine, text
import sys
sys.path.append('../..')
load_dotenv()

engine = create_engine(f"postgresql+psycopg2://{os.getenv('PG_USER')}:{os.getenv('PG_PASSWORD')}@{os.getenv('PG_HOST')}:{os.getenv('PG_PORT')}/{os.getenv('PG_DATABASE')}")

def create_architecture_tables():
    """Cr√©er les 3 tables architecturales de base"""
    
    print("üèóÔ∏è CR√âATION DE L'ARCHITECTURE DE BASE")
    print("=" * 50)
    
    with engine.connect() as conn:
        try:
            # 1. TABLE AASQA_REGIONS
            print(f"\nüó∫Ô∏è 1/3 - Cr√©ation table 'aasqa_regions'...")
            conn.execute(text("DROP TABLE IF EXISTS aasqa_regions CASCADE"))
            
            conn.execute(text("""
                CREATE TABLE aasqa_regions (
                    aasqa_code VARCHAR(10) PRIMARY KEY,
                    nom_region VARCHAR(255),
                    nb_communes INTEGER DEFAULT 0,
                    nb_mesures INTEGER DEFAULT 0
                )
            """))
            
            # INSERT des donn√©es AASQA
            aasqa_data = [
                ('2', 'Martinique'),
                ('27', 'Normandie'), 
                ('28', 'Eure-et-Loir'),
                ('44', 'Loire-Atlantique')
            ]
            
            for aasqa_code, nom_region in aasqa_data:
                conn.execute(text("""
                    INSERT INTO aasqa_regions (aasqa_code, nom_region)
                    VALUES (:aasqa_code, :nom_region)
                """), {"aasqa_code": aasqa_code, "nom_region": nom_region})
            
            count_aasqa = conn.execute(text("SELECT COUNT(*) FROM aasqa_regions")).fetchone()[0]
            print(f"   ‚úÖ {count_aasqa} r√©gions AASQA cr√©√©es")
            
            # 2. TABLE INDICE (niveaux de qualit√©)
            print(f"\nüé® 2/3 - Cr√©ation table 'indice'...")
            conn.execute(text("DROP TABLE IF EXISTS indice CASCADE"))
            
            conn.execute(text("""
                CREATE TABLE indice (
                    niveau VARCHAR(50) PRIMARY KEY,
                    description VARCHAR(255),
                    couleur VARCHAR(50),
                    ordre INTEGER
                )
            """))
            
            # INSERT des niveaux de qualit√©
            niveaux_data = [
                ('Bon', 'Qualit√© de l\'air satisfaisante', 'Vert', 1),
                ('Moyen', 'Qualit√© de l\'air acceptable', 'Jaune', 2), 
                ('D√©grad√©', 'Qualit√© de l\'air d√©grad√©e', 'Orange', 3),
                ('Mauvais', 'Qualit√© de l\'air mauvaise', 'Rouge', 4),
                ('Tr√®s mauvais', 'Qualit√© de l\'air tr√®s mauvaise', 'Violet', 5)
            ]
            
            for niveau, description, couleur, ordre in niveaux_data:
                conn.execute(text("""
                    INSERT INTO indice (niveau, description, couleur, ordre)
                    VALUES (:niveau, :description, :couleur, :ordre)
                """), {
                    "niveau": niveau,
                    "description": description, 
                    "couleur": couleur,
                    "ordre": ordre
                })
            
            count_indice = conn.execute(text("SELECT COUNT(*) FROM indice")).fetchone()[0]
            print(f"   ‚úÖ {count_indice} niveaux de qualit√© cr√©√©s")
            
            # 3. TABLE POLLUANTS
            print(f"\nüß™ 3/3 - Cr√©ation table 'polluants'...")
            conn.execute(text("DROP TABLE IF EXISTS polluants CASCADE"))
            conn.execute(text("""
                CREATE TABLE polluants (
                    code_polluant VARCHAR(10) PRIMARY KEY,
                    nom_polluant VARCHAR(100),
                    unite_mesure VARCHAR(20)
                )
            """))
              # INSERT des polluants
            polluants_data = [
                ('NO2', 'Dioxyde d\'azote', '¬µg/m¬≥'),
                ('PM10', 'Particules fines PM10', '¬µg/m¬≥'),
                ('PM2.5', 'Particules fines PM2.5', '¬µg/m¬≥'),
                ('O3', 'Ozone', '¬µg/m¬≥'),
                ('SO2', 'Dioxyde de soufre', '¬µg/m¬≥')
            ]
            
            for code, nom, unite in polluants_data:
                conn.execute(text("""
                    INSERT INTO polluants (code_polluant, nom_polluant, unite_mesure)
                    VALUES (:code, :nom, :unite)
                """), {
                    "code": code, "nom": nom, "unite": unite
                })
            
            count_polluants = conn.execute(text("SELECT COUNT(*) FROM polluants")).fetchone()[0]
            print(f"   ‚úÖ {count_polluants} polluants cr√©√©s")
            
            # COMMIT
            conn.commit()
            
            # V√âRIFICATION FINALE
            print(f"\nüéâ ARCHITECTURE CR√â√âE AVEC SUCC√àS !")
            print("-" * 40)
            
            # Afficher les r√©gions AASQA
            print("üó∫Ô∏è R√âGIONS AASQA :")
            regions = conn.execute(text("SELECT aasqa_code, nom_region FROM aasqa_regions ORDER BY aasqa_code")).fetchall()
            for code, nom in regions:
                print(f"   {code}: {nom}")
            
            # Afficher les niveaux de qualit√©
            print("\nüé® NIVEAUX DE QUALIT√â :")
            niveaux = conn.execute(text("SELECT niveau, couleur, ordre FROM indice ORDER BY ordre")).fetchall()
            for niveau, couleur, ordre in niveaux:
                print(f"   {ordre}. {niveau} ({couleur})")
            
            # Afficher les polluants
            print("\nüß™ POLLUANTS SURVEILL√âS :")
            polluants = conn.execute(text("SELECT code_polluant, nom_polluant, unite_mesure FROM polluants ORDER BY code_polluant")).fetchall()
            for code, nom, unite in polluants:
                print(f"   {code}: {nom} ({unite})")
            print(f"\n‚úÖ 3 tables architecturales op√©rationnelles")
            print(f"‚úÖ Pr√™t pour l'import des donn√©es principales")
            
        except Exception as e:
            print(f"‚ùå Erreur lors de la cr√©ation: {e}")
            conn.rollback()
            raise

if __name__ == "__main__":
    create_architecture_tables()